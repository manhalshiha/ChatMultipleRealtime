@page "/"
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient httpClient
<PageTitle>Chatting - Login</PageTitle>

<div class="containr">
    <div class="row">
        <div class="col-4">
        </div>
        <div class="col-4">
            <EditForm Model="LoginModel" OnValidSubmit="LoginAsync">
                <div class="card br-0 mt-5">
                    <div class="card-header bg-main br-0" >
                        <h2 class="text-white mb-0"> Blazing Chat - Login </h2>
                    </div>
                    <div class="card-body">
                        <DataAnnotationsValidator />
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <p class="text-danger">@errorMessage</p>
                        }
                        <div class="mb-3">
                            <label class="form-label">Username</label>
                            <InputText @bind-Value="@LoginModel.Username" DisplayName="Username" class="form-control" placeholder="UserName" />
                            <ValidationMessage For="()=>LoginModel.Username" />
                        </div>
                        <div class="mb-3">
                            <label class="form-label">Password</label>
                            <InputText type="password" @bind-Value="@LoginModel.Password" DisplayName="Password" class="form-control" placeholder="password" />
                            <ValidationMessage For="()=>LoginModel.Password" />
                        </div>
                    </div>
                    <div class="card-footer">
                            <NavLink href="register" class="btn btn-outline-primary float-start">Register</NavLink>
                            @if (isBusy)
                            {
                                <button class="btn btn-success float-end" type="button" disabled>
                                    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"> </span>
                                    Loading....
                                </button>

                            }
                            else
                            {

                                <button type="submit" class="btn btn-success float-end">Login</button>
                            }
                            <div class="clearfix"></div>

                    </div>
                </div>
            </EditForm>
        </div>
        <div class="col-4"></div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }
    public LoginDto LoginModel { get; set; } = new();
    private bool isBusy = false;
    private string errorMessage = null;
    public async Task LoginAsync()
    {
        try
        {
            isBusy = true;
            errorMessage = null;
            var response = await httpClient.PostAsJsonAsync<LoginDto>("api/account/login", LoginModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);

                var serialized = JsonConverter.Serialize(authResult);
                await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                //NavigationManager.NavigateTo("/chat");
                AuthenticationState.LoadState(authResult);
            }
            else
            {
                string? errorContent = null;
                errorContent = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error{response.StatusCode} - {response.ReasonPhrase}";
                }
                isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            isBusy = false;
        }
    }
}
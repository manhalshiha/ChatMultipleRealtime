@page "/chat"
@using System.Net.Http.Headers
@inject HttpClient httpClient

@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime jsRuntim
@inject NavigationManager navigationManger
<div class="container-fluid">
    <div class="card br-0 mt-5">
        <div class="card-header bg-main br-0 text-white">
            <div class="row">
                <div class="col">
                    <h2>Chat App</h2>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-warning float-end" @onclick="HandleClikLogout">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name">Welcome @AuthenticationState?.User?.Name </label>
                </div>
            </div>
        </div>
        <dic class="card-body messages-window bg-light d-flex">
            <div class="row" style="flex:1;">

                <div class="col-sm-2 col-3">
                    <ChatsList Chats="Chats" OnUserSelected="OnUserSelected" />
                </div>
                
                @* <div class="col-sm-8 col-6 d-flex justify-content-center align-items-center" style="background-color:#f4ecff"> *@
                <div class="col-sm-8 col-6 d-flex px-0" style="background-color:#f4ecff">
                    <ChatDetails OnCancel="HandleChatDetailsCancel" 
                        NewIncomingMessage="@newIncomingMessage" 
                        OnIncomingMessageRecived="()=>newIncomingMessage=null"
                        SelectedUser="SelectedUser" />
                </div>
                
                <div class="col-sm-2 col-3">
                    <UsersList Loading="_loadingUsers" Users="Users" OnUserSelected="OnUserSelected" />
                </div>

            </div>
        </dic>
    </div>
</div>
@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }
    private HubConnection? hubConnection;
    private bool _loadingUsers = false;
    private UserDto? SelectedUser = null;
    private MessageDto newIncomingMessage = null;
    public ICollection<UserDto> Users { get; set; } = new HashSet<UserDto>();
    public ICollection<UserDto> Chats { get; set; } = new HashSet<UserDto>();
    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (!AuthenticationState.IsAuthenticated)
        {
            navigationManger.NavigateTo("/");

        }
        else
        {
            hubConnection = ConfigureHubConnection();
            _loadingUsers = true;
            var userListTask = GetClient().GetFromJsonAsync<ICollection<UserDto>>("api/users", JsonConverter.JsonSerializerOptions);
            await hubConnection.StartAsync();
            var UsersList = await userListTask;
            if (UsersList is not null)
            {
                Users = UsersList;
            }
            _loadingUsers = false;
            StateHasChanged();
            await hubConnection.SendAsync(nameof(IBlazingChatHubServer.SetUserOnline), AuthenticationState.User);
            StateHasChanged();
        }
    }
    private HttpClient GetClient()
    {
        httpClient.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", AuthenticationState.Token);
        return httpClient;
    }
    private async Task OnUserSelected(UserDto user)
    {
        SelectedUser = user;
        var selectedChatUser = Chats.FirstOrDefault(c => c.IsSelected);
        if (selectedChatUser is not null)
        {
            selectedChatUser.IsSelected = false; 
        }
        var chatUser = Chats.FirstOrDefault((c => c.Id == user.Id));
        if (chatUser is null)
        {
            user.IsSelected = true;
            Chats.Add(user); 
        }
        else
        {
            chatUser.IsSelected = true;

        }
    }
    private async Task HandleChatDetailsCancel(bool shouldRemoveFromChatList)
    {
        if (shouldRemoveFromChatList)
        {
            Chats.Remove(SelectedUser);
        }
        SelectedUser = null;
    }
    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                                .WithUrl(navigationManger.ToAbsoluteUri("/hubs/blazing-chat"),
                                options => options.AccessTokenProvider = () => Task.FromResult(AuthenticationState.Token))
                                .Build();
        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (userName) =>
        {
            Users.Add(userName);
            StateHasChanged();
        });
        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.OnlineUsersList), (onlineUsers) =>
       {
           foreach (var user in Users)
           {
               if (onlineUsers.Any(u => u.Id == user.Id))
               {
                   user.IsOnline = true;
               }
           }
           StateHasChanged();
       });
        hubConnection.On<int>(nameof(IBlazingChatHubClient.UserIsOnline), (userId) =>
        {
            var user = Users.FirstOrDefault(u => u.Id == userId);
            if (user is not null)
            {
                user.IsOnline = true;
                StateHasChanged();
            }
        });
        hubConnection.On<int, string>(nameof(IBlazingChatHubClient.MessageRecived), (fromUserId, message) =>
        {
            var fromUser = Chats.FirstOrDefault(u => u.Id == fromUserId);
            if (!Chats.Any(c => c.Id == fromUserId)){
                Chats.Prepend(fromUser);
            }
            else
            {
                if (SelectedUser?.Id == fromUserId)
                {
                    newIncomingMessage = new MessageDto(SelectedUser.Id, fromUserId, message);
                    
                }
            }
            StateHasChanged();

        });
        return hubConnection;
    }
    private async Task HandleClikLogout()
    {
        await jsRuntim.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        // navigationManger.NavigateTo("/");
    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
            await hubConnection.DisposeAsync();
    }
}

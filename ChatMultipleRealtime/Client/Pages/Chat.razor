@page "/chat"

@implements IAsyncDisposable
@using Microsoft.AspNetCore.SignalR.Client
@inject IJSRuntime jsRuntim
@inject NavigationManager navigationManger
<div class="container-fluid">
    <div class="card br-0 mt-5">
        <div class="card-header bg-main br-0 text-white">
            <div class="row">
                <div class="col">
                    <h2>Chat App</h2>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-warning float-end" @onclick="HandleClikLogout">Logout</button>
                    <label class="float-end me-2 mt-2 topbar-name" >Welcome @AuthenticationState?.User?.Name </label>
                </div>
            </div>
        </div>
        <dic class="card-body messages-window">
            <div class="row">
                
                <div class="col-sm-2 col-3" >
                    <ChatsList Users="Users" OnUserSelected="OnUserSelected"/>
                </div>
                <div class="col-sm-8 col-6">
                    <ChatDetails SelectedUser="SelectedUser"/>
                </div>
                <div class="col-sm-2 col-3">
                    <UsersList OnUserSelected="OnUserSelected" />
                </div>

            </div>
        </dic>
    </div>
</div>
@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }
    private HubConnection? hubConnection;
    private UserDto? SelectedUser = null;
    public ICollection <UserDto> Users { get; set; } = new HashSet<UserDto>();
    protected override async void OnInitialized()
    {
        base.OnInitialized();

        if (!AuthenticationState.IsAuthenticated)
        {
            navigationManger.NavigateTo("/");

        }
        else
        {
            hubConnection = ConfigureHubConnection(); 
            await hubConnection.StartAsync();
            await hubConnection.SendAsync(nameof(IBlazingChatHubServer.ConnectUser), AuthenticationState.User);
        }
    }
    private async Task OnUserSelected(UserDto user)
    {
        SelectedUser = user;
    }
    private HubConnection ConfigureHubConnection()
    {
        var hubConnection = new HubConnectionBuilder()
                                .WithUrl(navigationManger.ToAbsoluteUri("/hubs/blazing-chat"),
                                options=>options.AccessTokenProvider=()=>Task.FromResult(AuthenticationState.Token))
                                .Build();
        hubConnection.On<UserDto>(nameof(IBlazingChatHubClient.UserConnected), (userName) =>
        {
            Users.Add(userName);
            StateHasChanged();
        });
        hubConnection.On<ICollection<UserDto>>(nameof(IBlazingChatHubClient.UserConnectedList), (userNames) =>
       {
           Users=userNames;
           StateHasChanged();
       });
        return hubConnection;
    }
    private async Task HandleClikLogout()
    {
        await jsRuntim.InvokeVoidAsync("window.removeFromStorage", AuthenticationState.AuthStoreKey);
        AuthenticationState.UnLoadState();
        // navigationManger.NavigateTo("/");
    }
    public async ValueTask DisposeAsync()
    {
        if(hubConnection is not null)
        await hubConnection.DisposeAsync();
    }
}

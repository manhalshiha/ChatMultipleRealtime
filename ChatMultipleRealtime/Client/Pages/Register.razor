@page "/register"
@inject NavigationManager navigationManager
@inject IJSRuntime JsRuntime
@inject HttpClient httpClient
<PageTitle>Chatting - Register</PageTitle>

<div class="containr">
    <div class="row">
        <div class="col">
        </div>
        <div class="col">
            <h2>Register to have account to chatting</h2>
            <hr />
            <EditForm Model="RegisterModel" OnValidSubmit="@RegisterAsync">
                <DataAnnotationsValidator />
                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <p class="text-danger">@errorMessage</p>
                }
                <div class="mb-3">
                    <InputText @bind-Value="@RegisterModel.Name" DisplayName="Username" class="form-control" placeholder="Name" />
                    <ValidationMessage For="()=>RegisterModel.Name" />
                </div>
                <div class="mb-3">
                    <InputText @bind-Value="@RegisterModel.Username" DisplayName="Username" class="form-control" placeholder="UserName" />
                    <ValidationMessage For="()=>RegisterModel.Username" />
                </div>
                <div class="mb-3">
                    <InputText type="password" @bind-Value="@RegisterModel.Password" DisplayName="Password" class="form-control" placeholder="password" />
                    <ValidationMessage For="()=>RegisterModel.Password" />
                </div>
                <div>
                    <button type="submit" class="btn btn-success float-start" @(isBusy?"disabled":"null")>Register</button>
                    <NavLink Match="NavLinkMatch.All" href="/" class="btn btn-outline-primary float-end">Login</NavLink>
                </div>
            </EditForm>
        </div>
        <div class="col">
        </div>
    </div>
</div>

@code {
    [CascadingParameter(Name = "AuthenticationState")]
    public AuthenticationState AuthenticationState { get; set; }
    public RegisterDto RegisterModel { get; set; } = new();
    private bool isBusy = false;
    private string? errorMessage = null;
    public async Task RegisterAsync()
    {
        try
        {
            isBusy = true;
            errorMessage = null;
            var response = await httpClient.PostAsJsonAsync<RegisterDto>("api/account/register", RegisterModel);
            if (response.IsSuccessStatusCode)
            {
                var content = await response.Content.ReadAsStringAsync();
                var authResult = JsonConverter.Deserialize<AuthResponseDto>(content);
                var serialized = JsonConverter.Serialize(authResult);
                await JsRuntime.InvokeVoidAsync("window.setToStorage", AuthenticationState.AuthStoreKey, serialized);
                // navigationManager.NavigateTo("/chat");
                AuthenticationState.LoadState(authResult);
            }
            else
            {
                string? errorContent = null;
                errorContent = await response.Content.ReadAsStringAsync();
                if (string.IsNullOrWhiteSpace(errorContent))
                {
                    errorContent = $"Error{response.StatusCode} - {response.ReasonPhrase}";
                }
                isBusy = false;
                errorMessage = errorContent;
            }
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            isBusy = false;
        }
    }
}